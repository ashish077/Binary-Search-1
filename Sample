// Time Complexity :O(logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
//use binarysearch to throw away half of the array in each iteration.
class Solution {
    //binary search
   
    public int search(int[] nums, int target) {
      
        if(nums.length==0) return -1;
        int l=0, r=nums.length-1;
        
        while(l<=r)
        {
         int mid=(l+r)/2;
         if(nums[mid]==target) return mid;
         if(nums[l]>nums[mid])
         {
          if(target<=nums[r] && target >nums[mid])
               l=mid+1;
          else
              r=mid-1;
         }
          else
          {
              if(target>=nums[l] && target<nums[mid])
                  r=mid-1;
              else
                  l=mid+1;
          }
        }
        
        return -1;
    }
}
